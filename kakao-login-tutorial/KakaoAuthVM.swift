//
//  KaKaoAuthVM.swift
//  kakao-login-tutorial
//
//  Created by Ïú†Ïö±ÌòÑ on 2022/08/14.
//

import Foundation
import Combine
import KakaoSDKAuth
import KakaoSDKUser
import Alamofire



//final public class AuthApi {
//    static let authapi = AuthApi()
//    public struct OAuthToken : Codable {
//        public let accessToken: String
//
//    }
//
//
//    private init() {}
//}

//final public class myUserApi {
//
//    public static let shared: UserApi
//
//}


class KakaoAuthVM : ObservableObject {
    
    func handleKakaoLogin() {
        // Ïπ¥Ïπ¥Ïò§ÌÜ° ÏÑ§Ïπò Ïó¨Î∂Ä ÌôïÏù∏
        if (UserApi.isKakaoTalkLoginAvailable()) {
            
            //Ïπ¥Ïπ¥Ïò§ Ïï±ÏùÑ ÌÜµÌï¥ Î°úÍ∑∏Ïù∏ - ÏÑ§Ïπò O
            UserApi.shared.loginWithKakaoTalk {(oauthToken, error) in
                if let error = error {
                    print(error)
                }
                else {
                    print("loginWithKakaoTalk() success.")

                    //do something
                    _ = oauthToken
//                    print("oauth token : \(oauthToken)")
                }
            }
        } else {  // ÏÑ§Ïπò X
            // Ïπ¥Ïπ¥Ïò§ ÏõπÎ∑∞Î°ú Î°úÍ∑∏Ïù∏
            UserApi.shared.loginWithKakaoAccount {(oauthToken, error) in
                    if let error = error {
                        print(error)
                    }
                    else {
                        print("loginWithKakaoAccount() success.")

                        //do something
                        _ = oauthToken
                        print("oauth token : \(oauthToken)")
                    }
                }
        }
    }
    
    func tokenInfo() {
        // ÏÇ¨Ïö©Ïûê ÏóëÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Ï†ïÎ≥¥ Ï°∞Ìöå(Ï∫êÏãúÏóê Ï†ÄÏû•ÌïòÏó¨ ÏÇ¨Ïö©Ï§ëÏù∏ ÌÜ†ÌÅ∞)
        UserApi.shared.accessTokenInfo {(accessTokenInfo, error) in
            if let error = error {
                print(error)
            }
            else {
                print("ÏóëÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ ÏÑ±Í≥µ")
                _ = accessTokenInfo
            }
        }
    }
    
    
    func postTest() {
        let result = UserApi.isKakaoTalkLoginAvailable()
        print("oauthToken : \(result)")
        
        var request = URLRequest(url: Foundation.URL(string: url)!)
            request.httpMethod = "POST"
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            request.timeoutInterval = 10
            
            // POST Î°ú Î≥¥ÎÇº Ï†ïÎ≥¥
            let params = ["id":"ÏïÑÏù¥Îîî", "pw":"Ìå®Ïä§ÏõåÎìú"] as Dictionary

            // httpBody Ïóê parameters Ï∂îÍ∞Ä
        // id token, jwt Î≥¥ÎÇ¥Í∏∞, bearer
            do {
                try request.httpBody = JSONSerialization.data(withJSONObject: params, options: [])
            } catch {
                print("http Body Error")
            }
            
            AF.request(request).responseString { (response) in
                switch response.result {
                case .success:
                    print("POST ÏÑ±Í≥µ")
                case .failure(let error):
                    print("üö´ Alamofire Request Error\nCode:\(error._code), Message: \(error.errorDescription!)")
                }
            }
    }
    
    
    func post() {
//        let jToken = UserApi.shared.loginWithKakaoTalk { (oauthToken, error) -> Void in
//            let dicData : Dictionary<String, Any> = [String : Any]()
//            if oauthToken != nil {
//                do {
////                    let jToken = try JSONSerialization.data(withJSONObject: dicData)
////                    print("dicData : \(dicData)")
////                    let aToken.acToken = oauthToken?.accessToken
//                }
//                catch { print(error) }
//            } else {
//                print(error)
//            }
//        }
        
        let result = UserApi.isKakaoTalkLoginAvailable()
        print("oauthToken : \(result)")

        
        var request = URLRequest(url: Foundation.URL(string: url)!)
            request.httpMethod = "POST"
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            request.timeoutInterval = 10
            
            // POST Î°ú Î≥¥ÎÇº Ï†ïÎ≥¥
            let params = ["id":"ÏïÑÏù¥Îîî", "pw":"Ìå®Ïä§ÏõåÎìú"] as Dictionary

            // httpBody Ïóê parameters Ï∂îÍ∞Ä
        // id token, jwt Î≥¥ÎÇ¥Í∏∞, bearer
            do {
                try request.httpBody = JSONSerialization.data(withJSONObject: params, options: [])
                
                
            } catch {
                print("http Body Error")
            }
        AF.request(request as URLRequestConvertible).responseString { (response) in
                switch response.result {
                case .success:
                    print("POST ÏÑ±Í≥µ")
                case .failure(let error):
                    print("üö´ Alamofire Request Error\nCode:\(error._code), Message: \(error.errorDescription!)")
                }
            }
    }
    
    
    func tokenTest(oauthToken : UserApi) {
        //token ÎÇ¥Ïö© Ï∂úÎ†§
//                let result = UserApi.isKakaoTalkLoginAvailable()
//                print("oauthToken : \(result)")

        
         
        
        var request = URLRequest(url: Foundation.URL(string: url)!)
            request.httpMethod = "POST"
        request.setValue(oauthToken.idToken, forHTTPHeaderField: "Content-Type")
            request.timeoutInterval = 10
            
            // POST Î°ú Î≥¥ÎÇº Ï†ïÎ≥¥
            let params = ["id":"ÏïÑÏù¥Îîî", "pw":"Ìå®Ïä§ÏõåÎìú"] as Dictionary

            // httpBody Ïóê parameters Ï∂îÍ∞Ä
        // id token, jwt Î≥¥ÎÇ¥Í∏∞, bearer
            do {
                try request.httpBody = JSONSerialization.data(withJSONObject: params, options: [])
            } catch {
                print("http Body Error")
            }
            
            AF.request(request).responseString { (response) in
                switch response.result {
                case .success:
                    print("POST ÏÑ±Í≥µ")
                case .failure(let error):
                    print("üö´ Alamofire Request Error\nCode:\(error._code), Message: \(error.errorDescription!)")
                }
            }
    }
    
}
